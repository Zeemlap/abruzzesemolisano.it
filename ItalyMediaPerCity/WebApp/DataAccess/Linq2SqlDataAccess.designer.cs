#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApp.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Linq2SqlDataAccessDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertSampleMetadata(SampleMetadata instance);
    partial void UpdateSampleMetadata(SampleMetadata instance);
    partial void DeleteSampleMetadata(SampleMetadata instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertSampleMetadataFieldApproval(SampleMetadataFieldApproval instance);
    partial void UpdateSampleMetadataFieldApproval(SampleMetadataFieldApproval instance);
    partial void DeleteSampleMetadataFieldApproval(SampleMetadataFieldApproval instance);
    #endregion
		
		public Linq2SqlDataAccessDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Linq2SqlDataAccessDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Linq2SqlDataAccessDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Linq2SqlDataAccessDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<SampleMetadata> SampleMetadatas
		{
			get
			{
				return this.GetTable<SampleMetadata>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<SampleMetadataFieldApproval> SampleMetadataFieldApprovals
		{
			get
			{
				return this.GetTable<SampleMetadataFieldApproval>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MimeType;
		
		private byte[] _Data;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    partial void OnDataChanging(byte[] value);
    partial void OnDataChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public File()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="mimeType", Storage="_MimeType", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MimeType
		{
			get
			{
				return this._MimeType;
			}
			set
			{
				if ((this._MimeType != value))
				{
					this.OnMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._MimeType = value;
					this.SendPropertyChanged("MimeType");
					this.OnMimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="data", Storage="_Data", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public byte[] Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Latitude;
		
		private string _DefaultName;
		
		private System.Nullable<double> _Longitude;
		
		private System.Nullable<int> _ImportanceCategory;
		
		private EntitySet<SampleMetadata> _Samples;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnImportanceCategoryChanging(System.Nullable<int> value);
    partial void OnImportanceCategoryChanged();
    #endregion
		
		public Location()
		{
			this._Samples = new EntitySet<SampleMetadata>(new Action<SampleMetadata>(this.attach_Samples), new Action<SampleMetadata>(this.detach_Samples));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="lat", Storage="_Latitude", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_DefaultName", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._DefaultName;
			}
			set
			{
				if ((this._DefaultName != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._DefaultName = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="lng", Storage="_Longitude", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="importanceCategory", Storage="_ImportanceCategory", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ImportanceCategory
		{
			get
			{
				return this._ImportanceCategory;
			}
			set
			{
				if ((this._ImportanceCategory != value))
				{
					this.OnImportanceCategoryChanging(value);
					this.SendPropertyChanging();
					this._ImportanceCategory = value;
					this.SendPropertyChanged("ImportanceCategory");
					this.OnImportanceCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_SampleMetadata", Storage="_Samples", ThisKey="Id", OtherKey="LocationId")]
		public EntitySet<SampleMetadata> Samples
		{
			get
			{
				return this._Samples;
			}
			set
			{
				this._Samples.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Samples(SampleMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Samples(SampleMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class SampleMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private byte _GenderAsByte;
		
		private bool _IsPublic;
		
		private System.Nullable<short> _YearOfBirth;
		
		private string _MotherTongues;
		
		private System.Nullable<bool> _AlwaysLivedAtLocation0;
		
		private System.Nullable<short> _YearOfMovingToLocation0;
		
		private string _OtherInformation;
		
		private System.DateTime _CreatedAt;
		
		private System.Nullable<int> _LocationId;
		
		private System.Nullable<int> _TranslationFileId;
		
		private System.Nullable<int> _TranscriptionFileId;
		
		private int _SampleDataFileId;
		
		private System.Nullable<int> _CreatorUserId;
		
		private EntitySet<SampleMetadataFieldApproval> _ApprovedFields;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<File> _Translation;
		
		private EntityRef<File> _Transcription;
		
		private EntityRef<File> _SampleData;
		
		private EntityRef<User> _CreatorUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(byte value);
    partial void OnGenderChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnYearOfBirthChanging(System.Nullable<short> value);
    partial void OnYearOfBirthChanged();
    partial void OnMotherTonguesChanging(string value);
    partial void OnMotherTonguesChanged();
    partial void OnAlwaysLivedAtLocation0Changing(System.Nullable<bool> value);
    partial void OnAlwaysLivedAtLocation0Changed();
    partial void OnYearOfMovingToLocation0Changing(System.Nullable<short> value);
    partial void OnYearOfMovingToLocation0Changed();
    partial void OnOtherInformationChanging(string value);
    partial void OnOtherInformationChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnLocationIdChanging(System.Nullable<int> value);
    partial void OnLocationIdChanged();
    partial void OnTranslationFileIdChanging(System.Nullable<int> value);
    partial void OnTranslationFileIdChanged();
    partial void OnTranscriptionFileIdChanging(System.Nullable<int> value);
    partial void OnTranscriptionFileIdChanged();
    partial void OnSampleDataFileIdChanging(int value);
    partial void OnSampleDataFileIdChanged();
    partial void OnCreatorUserIdChanging(System.Nullable<int> value);
    partial void OnCreatorUserIdChanged();
    #endregion
		
		public SampleMetadata()
		{
			this._ApprovedFields = new EntitySet<SampleMetadataFieldApproval>(new Action<SampleMetadataFieldApproval>(this.attach_ApprovedFields), new Action<SampleMetadataFieldApproval>(this.detach_ApprovedFields));
			this._Location = default(EntityRef<Location>);
			this._Translation = default(EntityRef<File>);
			this._Transcription = default(EntityRef<File>);
			this._SampleData = default(EntityRef<File>);
			this._CreatorUser = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="gender", Storage="_GenderAsByte", UpdateCheck=UpdateCheck.Never)]
		public byte Gender
		{
			get
			{
				return this._GenderAsByte;
			}
			set
			{
				if ((this._GenderAsByte != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._GenderAsByte = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="isAnonymous", Storage="_IsPublic", UpdateCheck=UpdateCheck.Never)]
		public bool IsAnonymous
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="yearOfBirth", Storage="_YearOfBirth", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> YearOfBirth
		{
			get
			{
				return this._YearOfBirth;
			}
			set
			{
				if ((this._YearOfBirth != value))
				{
					this.OnYearOfBirthChanging(value);
					this.SendPropertyChanging();
					this._YearOfBirth = value;
					this.SendPropertyChanged("YearOfBirth");
					this.OnYearOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="motherTongues", Storage="_MotherTongues", UpdateCheck=UpdateCheck.Never)]
		public string MotherTongues
		{
			get
			{
				return this._MotherTongues;
			}
			set
			{
				if ((this._MotherTongues != value))
				{
					this.OnMotherTonguesChanging(value);
					this.SendPropertyChanging();
					this._MotherTongues = value;
					this.SendPropertyChanged("MotherTongues");
					this.OnMotherTonguesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="alwaysLivedAtLocation0", Storage="_AlwaysLivedAtLocation0", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> AlwaysLivedAtLocation0
		{
			get
			{
				return this._AlwaysLivedAtLocation0;
			}
			set
			{
				if ((this._AlwaysLivedAtLocation0 != value))
				{
					this.OnAlwaysLivedAtLocation0Changing(value);
					this.SendPropertyChanging();
					this._AlwaysLivedAtLocation0 = value;
					this.SendPropertyChanged("AlwaysLivedAtLocation0");
					this.OnAlwaysLivedAtLocation0Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="yearOfMovingToLocation0", Storage="_YearOfMovingToLocation0", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> YearOfMovingToLocation0
		{
			get
			{
				return this._YearOfMovingToLocation0;
			}
			set
			{
				if ((this._YearOfMovingToLocation0 != value))
				{
					this.OnYearOfMovingToLocation0Changing(value);
					this.SendPropertyChanging();
					this._YearOfMovingToLocation0 = value;
					this.SendPropertyChanged("YearOfMovingToLocation0");
					this.OnYearOfMovingToLocation0Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="otherInformation", Storage="_OtherInformation", UpdateCheck=UpdateCheck.Never)]
		public string OtherInformation
		{
			get
			{
				return this._OtherInformation;
			}
			set
			{
				if ((this._OtherInformation != value))
				{
					this.OnOtherInformationChanging(value);
					this.SendPropertyChanging();
					this._OtherInformation = value;
					this.SendPropertyChanged("OtherInformation");
					this.OnOtherInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="createdAt", Storage="_CreatedAt", DbType="datetime2", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="locationId", Storage="_LocationId", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="translationFileId", Storage="_TranslationFileId", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TranslationFileId
		{
			get
			{
				return this._TranslationFileId;
			}
			set
			{
				if ((this._TranslationFileId != value))
				{
					this.OnTranslationFileIdChanging(value);
					this.SendPropertyChanging();
					this._TranslationFileId = value;
					this.SendPropertyChanged("TranslationFileId");
					this.OnTranslationFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="transcriptionFileId", Storage="_TranscriptionFileId", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TranscriptionFileId
		{
			get
			{
				return this._TranscriptionFileId;
			}
			set
			{
				if ((this._TranscriptionFileId != value))
				{
					this.OnTranscriptionFileIdChanging(value);
					this.SendPropertyChanging();
					this._TranscriptionFileId = value;
					this.SendPropertyChanged("TranscriptionFileId");
					this.OnTranscriptionFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="sampleDataFileId", Storage="_SampleDataFileId", UpdateCheck=UpdateCheck.Never)]
		public int SampleDataFileId
		{
			get
			{
				return this._SampleDataFileId;
			}
			set
			{
				if ((this._SampleDataFileId != value))
				{
					this.OnSampleDataFileIdChanging(value);
					this.SendPropertyChanging();
					this._SampleDataFileId = value;
					this.SendPropertyChanged("SampleDataFileId");
					this.OnSampleDataFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="creatorUserId", Storage="_CreatorUserId", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CreatorUserId
		{
			get
			{
				return this._CreatorUserId;
			}
			set
			{
				if ((this._CreatorUserId != value))
				{
					this.OnCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserId = value;
					this.SendPropertyChanged("CreatorUserId");
					this.OnCreatorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SampleMetadata_SampleMetadataFieldApproval", Storage="_ApprovedFields", ThisKey="Id", OtherKey="SampleMetadataId")]
		public EntitySet<SampleMetadataFieldApproval> ApprovedFields
		{
			get
			{
				return this._ApprovedFields;
			}
			set
			{
				this._ApprovedFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_SampleMetadata", Storage="_Location", ThisKey="LocationId", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Samples.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Samples.Add(this);
						this._LocationId = value.Id;
					}
					else
					{
						this._LocationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_SampleMetadata", Storage="_Translation", ThisKey="TranslationFileId", OtherKey="Id", IsForeignKey=true)]
		public File Translation
		{
			get
			{
				return this._Translation.Entity;
			}
			set
			{
				if ((this._Translation.Entity != value))
				{
					this.SendPropertyChanging();
					this._Translation.Entity = value;
					this.SendPropertyChanged("Translation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_SampleMetadata1", Storage="_Transcription", ThisKey="TranscriptionFileId", OtherKey="Id", IsForeignKey=true)]
		public File Transcription
		{
			get
			{
				return this._Transcription.Entity;
			}
			set
			{
				if ((this._Transcription.Entity != value))
				{
					this.SendPropertyChanging();
					this._Transcription.Entity = value;
					this.SendPropertyChanged("Transcription");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_SampleMetadata2", Storage="_SampleData", ThisKey="SampleDataFileId", OtherKey="Id", IsForeignKey=true)]
		public File SampleData
		{
			get
			{
				return this._SampleData.Entity;
			}
			set
			{
				if ((this._SampleData.Entity != value))
				{
					this.SendPropertyChanging();
					this._SampleData.Entity = value;
					this.SendPropertyChanged("SampleData");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SampleMetadata", Storage="_CreatorUser", ThisKey="CreatorUserId", OtherKey="Id", IsForeignKey=true)]
		public User CreatorUser
		{
			get
			{
				return this._CreatorUser.Entity;
			}
			set
			{
				User previousValue = this._CreatorUser.Entity;
				if (((previousValue != value) 
							|| (this._CreatorUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatorUser.Entity = null;
						previousValue.CreatedSamples.Remove(this);
					}
					this._CreatorUser.Entity = value;
					if ((value != null))
					{
						value.CreatedSamples.Add(this);
						this._CreatorUserId = value.Id;
					}
					else
					{
						this._CreatorUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CreatorUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApprovedFields(SampleMetadataFieldApproval entity)
		{
			this.SendPropertyChanging();
			entity.Approves = this;
		}
		
		private void detach_ApprovedFields(SampleMetadataFieldApproval entity)
		{
			this.SendPropertyChanging();
			entity.Approves = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private byte[] _PasswordSalt;
		
		private byte[] _PasswordHash;
		
		private EntitySet<SampleMetadata> _CreatedSamples;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordSaltChanging(byte[] value);
    partial void OnPasswordSaltChanged();
    partial void OnPasswordHashChanging(byte[] value);
    partial void OnPasswordHashChanged();
    #endregion
		
		public User()
		{
			this._CreatedSamples = new EntitySet<SampleMetadata>(new Action<SampleMetadata>(this.attach_CreatedSamples), new Action<SampleMetadata>(this.detach_CreatedSamples));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="password_salt", Storage="_PasswordSalt", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public byte[] PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="password_hash", Storage="_PasswordHash", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public byte[] PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SampleMetadata", Storage="_CreatedSamples", ThisKey="Id", OtherKey="CreatorUserId")]
		public EntitySet<SampleMetadata> CreatedSamples
		{
			get
			{
				return this._CreatedSamples;
			}
			set
			{
				this._CreatedSamples.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CreatedSamples(SampleMetadata entity)
		{
			this.SendPropertyChanging();
			entity.CreatorUser = this;
		}
		
		private void detach_CreatedSamples(SampleMetadata entity)
		{
			this.SendPropertyChanging();
			entity.CreatorUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class SampleMetadataFieldApproval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SampleMetadataId;
		
		private string _FieldName;
		
		private EntityRef<SampleMetadata> _Approves;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSampleMetadataIdChanging(int value);
    partial void OnSampleMetadataIdChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    #endregion
		
		public SampleMetadataFieldApproval()
		{
			this._Approves = default(EntityRef<SampleMetadata>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="sampleMetadataId", Storage="_SampleMetadataId", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int SampleMetadataId
		{
			get
			{
				return this._SampleMetadataId;
			}
			set
			{
				if ((this._SampleMetadataId != value))
				{
					this.OnSampleMetadataIdChanging(value);
					this.SendPropertyChanging();
					this._SampleMetadataId = value;
					this.SendPropertyChanged("SampleMetadataId");
					this.OnSampleMetadataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="fieldName", Storage="_FieldName", DbType="char(32)", CanBeNull=false, IsPrimaryKey=true)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SampleMetadata_SampleMetadataFieldApproval", Storage="_Approves", ThisKey="SampleMetadataId", OtherKey="Id", IsForeignKey=true)]
		public SampleMetadata Approves
		{
			get
			{
				return this._Approves.Entity;
			}
			set
			{
				SampleMetadata previousValue = this._Approves.Entity;
				if (((previousValue != value) 
							|| (this._Approves.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Approves.Entity = null;
						previousValue.ApprovedFields.Remove(this);
					}
					this._Approves.Entity = value;
					if ((value != null))
					{
						value.ApprovedFields.Add(this);
						this._SampleMetadataId = value.Id;
					}
					else
					{
						this._SampleMetadataId = default(int);
					}
					this.SendPropertyChanged("Approves");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
